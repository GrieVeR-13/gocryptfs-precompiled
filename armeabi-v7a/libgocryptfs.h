/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package libgocryptfs/v2 */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 5 "api.go"

#include <stdlib.h>
#include <stdint.h>
#include <string.h>
#include <sys/stat.h>
#include <sys/statvfs.h>

struct stater {
  unsigned int st_mode;
  long long st_size;
  struct timespec st_atim;
  struct timespec st_mtim;
  struct timespec st_ctim;
};

typedef void (*logOp)(const char *const str);
static void executeLog(logOp op, const char *const str) {
  op(str);
}

typedef int (*openOp)(const char *const pathname, int flags);
static int executeOpen(openOp op, const char *const pathname, int flags) {
  return op(pathname, flags);
}

typedef int (*readFileOp)(int fd, void *bytes, int count);
static int executeReadFile(readFileOp op, int fd, void *bytes, int count) {
  return op(fd, bytes, count);
}

typedef int (*readAtFileOp)(int fd, void *bytes, int count, long long startPosition);
static int executeReadAtFile(readAtFileOp op, int fd, void *bytes, int count, long long startPosition) {
  return op(fd, bytes, count, startPosition);
}

typedef int (*writeFileOp)(int fd, void *bytes, int count);
static int executeWriteFile(writeFileOp op, int fd, void *bytes, int count) {
  return op(fd, bytes, count);
}

typedef int (*writeAtFileOp)(int fd, void *bytes, int count, long long startPosition);
static int executeWriteAtFile(writeAtFileOp op, int fd, void *bytes, int count, long long startPosition) {
  return op(fd, bytes, count, startPosition);
}

typedef int (*closeFileOp)(int fd);
static int executeCloseFile(closeFileOp op, int fd) {
  return op(fd);
}

typedef int (*renameOp)(const char *const oldpath, const char *const newpath);
static int executeRename(renameOp op, const char *const oldpath, const char *const newpath) {
  return op(oldpath, newpath);
}

typedef int (*fileTruncateOp)(int fd, long long length);
static int executeFileTruncate(fileTruncateOp op, int fd,  long long length) {
  return op(fd, length);
}

typedef int (*unlinkOp)(const char *const path, int flags);
static int executeUnlink(unlinkOp op, const char *const path, int flags) {
  return op(path, flags);
}

typedef int (*utimensOp)(const char *const path, struct timespec *tsa, struct timespec *tsm);
static int executeUtimens(utimensOp op, const char *const path, struct timespec *tsa, struct timespec *tsm) {
  return op(path, tsa, tsm);
}

typedef int (*statOp)(const char *const path, struct stater *stat);
static int executeStat(statOp op, const char *const path, struct stater *stat) {
  return op(path, stat);
}

typedef int (*fstatOp)(int fd, struct stater *stat);
static int executeFstat(fstatOp op, int fd, struct stater *stat) {
  return op(fd, stat);
}

typedef int (*statvfsOp)(const char *const path, struct statvfs *statvfs);
static int executeStatvfs(statvfsOp op, const char *const path, struct statvfs *statvfs) {
  return op(path, statvfs);
}

typedef int (*mkdirOp)(const char *const path, uint32_t mode);
static int executeMkdirat(mkdirOp op, const char *const path, uint32_t mode) {
  return op(path, mode);
}

typedef void *(*openDirOp)(const char *const path, int *count);
static void * executeOpenDir(openDirOp op, const char *const path, int *count) {
  return op(path, count);
}

typedef int (*readDirOp)(void *dir, void *d_name, struct stater *stat);
static int executeReadDir(readDirOp op, void *dir, void *d_name, struct stater *stat) {
  return op(dir, d_name, stat);
}

typedef int (*closeDirOp)(void *dir);
static int executeCloseDir(closeDirOp op, void *dir) {
  return op(dir);
}


#line 1 "cgo-generated-wrapper"

#line 15 "common_ops.go"

#include "sys/statvfs.h"
#include "bits/timespec.h"

typedef const char * const_char;

#line 1 "cgo-generated-wrapper"

#line 20 "directory.go"

#include <stdlib.h>
#include <stdint.h>
#include <sys/stat.h>

typedef const char * const_char;
typedef struct stater stater;

typedef int (*onDirEntryOp)(const char *const str, struct stater *stat, void *userData);
static int executeOnDirEntryOp(onDirEntryOp op, const char *const str, struct stater *stat, void *userData) {
  return op(str, stat, userData);
}


#line 1 "cgo-generated-wrapper"

#line 20 "file.go"

#include <stdlib.h>
typedef const char * const_char;

#line 1 "cgo-generated-wrapper"

#line 19 "volume.go"

#include <stdlib.h>
typedef const char * const_char;

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt32 GoInt;
typedef GoUint32 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_32_bit_pointer_matching_GoInt[sizeof(void*)==32/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern int SetFileOperationsCallbacks(logOp log, openOp open, readFileOp readFile, readAtFileOp readAtFile, writeFileOp writeFile, writeAtFileOp writeAtFile, closeFileOp closeFile, renameOp rename, fileTruncateOp fileTruncate, unlinkOp unlink, utimensOp utimens, statOp stat, fstatOp fstat, statvfsOp statvfs, mkdirOp mkdir, openDirOp openDir, readDirOp readDir, closeDirOp closeDir);
extern int gcf_statvfs(int sessionID, const_char relPath, struct statvfs* statvfs);
extern int gcf_get_attrs(int sessionID, const_char relPath, struct stater* stat);
extern int gcf_fget_attrs(int sessionID, int fh, struct stater* stat);

// libgocryptfs: using Renameat instead of Renameat2 to support older kernels
//
extern int gcf_rename(int sessionID, const_char oldPath, const_char newPath);
extern int gcf_list_dir(int sessionID, const_char dirName, void* userData, onDirEntryOp onDirEntry);
extern int gcf_mkdir(int sessionID, const_char path, uint32_t mode);
extern int gcf_rmdir(int sessionID, const_char relPath);
extern int gcf_open(int sessionID, const_char path, int isReadOnly);
extern int gcf_ftruncate(int sessionID, int fh, uint64_t offset);
extern int gcf_read(int sessionID, int fh, uint64_t offset, GoSlice dstBuff);
extern int gcf_write(int sessionID, int fh, uint64_t offset, void* dst_buff, int size);
extern int gcf_close_file(int sessionID, int fh);
extern int gcf_unlink_file(int sessionID, const_char path);
extern int gcf_utimens(int sessionID, const_char path, struct timespec tsa, struct timespec tsm);
extern int gcf_init(const_char rootCipherDir, GoSlice password, GoSlice givenScryptHash, GoSlice returnedScryptHashBuff);
extern void gcf_close(int sessionID);
extern int gcf_change_password(const_char rootCipherDir, GoSlice oldPassword, GoSlice givenScryptHash, GoSlice newPassword, GoSlice returnedScryptHashBuff);
extern int gcf_create_volume(const_char rootCipherDir, GoSlice password, GoUint8 plaintextNames, GoInt8 xchacha, int logN, const_char creator, GoSlice returnedScryptHashBuff);

#ifdef __cplusplus
}
#endif
